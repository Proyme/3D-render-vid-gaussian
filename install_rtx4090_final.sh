#!/bin/bash

echo "üöÄ Installation Backend 3D - Gaussian Splatting RTX 4090"
echo "=========================================================="
echo "Version finale - Optimis√©e pour RunPod PyTorch 2.2.0"
echo ""

# V√©rifier GPU
echo "üìä V√©rification GPU..."
GPU_NAME=$(nvidia-smi --query-gpu=name --format=csv,noheader 2>/dev/null)
if [ $? -ne 0 ]; then
    echo "‚ùå GPU non d√©tect√©"
    exit 1
fi
echo "‚úÖ GPU: $GPU_NAME"

# V√©rifier PyTorch (d√©j√† install√© dans le template)
echo ""
echo "üîç V√©rification PyTorch..."
python3 << 'EOF'
import sys
try:
    import torch
    print(f"‚úÖ PyTorch {torch.__version__}")
    print(f"‚úÖ CUDA: {torch.cuda.is_available()}")
    if torch.cuda.is_available():
        print(f"‚úÖ GPU: {torch.cuda.get_device_name(0)}")
        print(f"‚úÖ Compute: {torch.cuda.get_device_capability(0)}")
    else:
        print("‚ùå CUDA non disponible")
        sys.exit(1)
except ImportError:
    print("‚ùå PyTorch non trouv√©")
    sys.exit(1)
EOF

if [ $? -ne 0 ]; then
    echo "‚ùå Erreur PyTorch"
    exit 1
fi

# Installer d√©pendances syst√®me
echo ""
echo "üì¶ Installation d√©pendances syst√®me..."
apt-get update -qq
apt-get install -y -qq colmap git build-essential wget

# Installer onnxruntime-gpu pour rembg
echo ""
echo "üöÄ Installation onnxruntime-gpu..."
pip3 install onnxruntime-gpu --no-cache-dir --quiet

# Installer d√©pendances Python
echo ""
echo "üêç Installation d√©pendances Python..."
pip3 install -r requirements_gaussian.txt --no-cache-dir --quiet

echo "   ‚úì FastAPI, uvicorn, rembg, trimesh, etc."

# Cloner et installer Gaussian Splatting
echo ""
echo "‚≠ê Installation Gaussian Splatting..."
if [ ! -d "/workspace/gaussian-splatting" ]; then
    cd /workspace
    echo "   Clonage du repository..."
    git clone --recursive https://github.com/graphdeco-inria/gaussian-splatting --quiet
    
    if [ $? -ne 0 ]; then
        echo "‚ùå Erreur lors du clonage"
        exit 1
    fi
    
    cd gaussian-splatting
    
    # Compiler les CUDA kernels pour RTX 4090 (Compute 8.9)
    echo "üî• Compilation CUDA kernels (RTX 4090 - Compute 8.9)..."
    export TORCH_CUDA_ARCH_LIST="8.9"
    
    echo "   Compilation diff-gaussian-rasterization..."
    pip3 install submodules/diff-gaussian-rasterization --no-cache-dir --quiet
    
    if [ $? -ne 0 ]; then
        echo "‚ö†Ô∏è  Erreur compilation diff-gaussian-rasterization (peut √™tre normal)"
    fi
    
    echo "   Compilation simple-knn..."
    pip3 install submodules/simple-knn --no-cache-dir --quiet
    
    if [ $? -ne 0 ]; then
        echo "‚ö†Ô∏è  Erreur compilation simple-knn (peut √™tre normal)"
    fi
    
    cd /workspace/3D-render-vid-gaussian
    echo "   ‚úì Gaussian Splatting install√©"
else
    echo "   ‚úì Gaussian Splatting d√©j√† install√©"
fi

# Installer Open3D
echo ""
echo "üì¶ Installation Open3D..."
pip3 install open3d --no-cache-dir --ignore-installed blinker --quiet
echo "   ‚úì Open3D install√©"

# Cr√©er dossiers
echo ""
echo "üìÅ Cr√©ation des dossiers..."
mkdir -p uploads outputs gaussian_workspace
echo "   ‚úì Dossiers cr√©√©s"

# V√©rification finale compl√®te
echo ""
echo "=========================================================="
echo "‚úÖ V√âRIFICATION FINALE"
echo "=========================================================="

python3 << 'EOF'
import sys

print("\nüîç V√©rification des imports...")

# PyTorch
try:
    import torch
    print(f"‚úÖ PyTorch {torch.__version__}")
    print(f"‚úÖ CUDA {torch.version.cuda}")
    print(f"‚úÖ GPU: {torch.cuda.get_device_name(0)}")
    compute = torch.cuda.get_device_capability(0)
    print(f"‚úÖ Compute: {compute}")
    vram = torch.cuda.get_device_properties(0).total_memory / 1024**3
    print(f"‚úÖ VRAM: {vram:.1f} GB")
except Exception as e:
    print(f"‚ùå PyTorch: {e}")
    sys.exit(1)

# FastAPI
try:
    import fastapi
    print(f"‚úÖ FastAPI {fastapi.__version__}")
except:
    print("‚ùå FastAPI manquant")
    sys.exit(1)

# rembg
try:
    import rembg
    print(f"‚úÖ rembg install√©")
except:
    print("‚ùå rembg manquant")
    sys.exit(1)

# Open3D
try:
    import open3d
    print(f"‚úÖ Open3D install√©")
except:
    print("‚ùå Open3D manquant")
    sys.exit(1)

# Trimesh
try:
    import trimesh
    print(f"‚úÖ Trimesh install√©")
except:
    print("‚ùå Trimesh manquant")
    sys.exit(1)

# OpenCV
try:
    import cv2
    print(f"‚úÖ OpenCV {cv2.__version__}")
except:
    print("‚ùå OpenCV manquant")
    sys.exit(1)

print("\nüéØ Configuration GPU:")
gpu_name = torch.cuda.get_device_name(0)
if "4090" in gpu_name:
    print("‚úÖ RTX 4090 d√©tect√© et configur√© !")
    print("‚ö° Performance estim√©e: 2-3 minutes/g√©n√©ration")
elif "3090" in gpu_name:
    print("‚úÖ RTX 3090 d√©tect√© !")
    print("‚ö° Performance estim√©e: 3-4 minutes/g√©n√©ration")
else:
    print(f"‚úÖ GPU: {gpu_name}")

print("\nüöÄ Syst√®me pr√™t pour Gaussian Splatting !")
sys.exit(0)
EOF

if [ $? -ne 0 ]; then
    echo ""
    echo "‚ùå Erreur lors de la v√©rification"
    echo "Certaines d√©pendances manquent"
    exit 1
fi

echo ""
echo "=========================================================="
echo "‚úÖ Installation termin√©e avec succ√®s !"
echo "=========================================================="
echo ""
echo "üöÄ Pour lancer le serveur:"
echo "   ./start_gaussian.sh"
echo ""
echo "üìä Pour monitorer le GPU:"
echo "   watch -n 1 nvidia-smi"
echo ""
echo "üåê L'URL du serveur sera affich√©e au d√©marrage"
echo ""

#!/bin/bash

echo "üî• Installation Backend 3D - Gaussian Splatting RTX 5090"
echo "=========================================================="
echo "Version PyTorch Nightly (seule compatible RTX 5090 sm_120)"
echo ""

# V√©rifier GPU
echo "üìä V√©rification GPU..."
nvidia-smi
if [ $? -ne 0 ]; then
    echo "‚ùå GPU non d√©tect√© - Red√©marrez le Pod"
    exit 1
fi

echo ""
echo "‚úÖ GPU RTX 5090 d√©tect√© !"
echo ""

# Mettre √† jour apt
echo "üîÑ Mise √† jour des paquets..."
apt-get update

# Installer d√©pendances syst√®me
echo "üì¶ Installation des d√©pendances syst√®me..."
apt-get install -y \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libxcb-xinerama0 \
    colmap \
    git \
    build-essential \
    wget

# Installer PyTorch Nightly (DERNI√àRE VERSION DISPONIBLE)
echo ""
echo "üî• Installation PyTorch Nightly (support sm_120)..."
pip3 uninstall -y torch torchvision torchaudio 2>/dev/null || true

# Installer la derni√®re version nightly sans sp√©cifier de version exacte
pip3 install --pre torch torchvision torchaudio \
    --index-url https://download.pytorch.org/whl/nightly/cu124 \
    --no-cache-dir

# V√©rifier PyTorch
echo ""
echo "‚úÖ V√©rification PyTorch..."
python3 << 'EOF'
import torch
import sys

print(f"PyTorch: {torch.__version__}")
print(f"CUDA available: {torch.cuda.is_available()}")

if not torch.cuda.is_available():
    print("‚ùå CUDA non disponible")
    sys.exit(1)

print(f"CUDA version: {torch.version.cuda}")
print(f"GPU: {torch.cuda.get_device_name(0)}")
print(f"Compute Capability: {torch.cuda.get_device_capability(0)}")

# V√©rifier si RTX 5090 est support√©
compute_cap = torch.cuda.get_device_capability(0)
if compute_cap[0] >= 12:
    print("‚úÖ RTX 5090 (sm_120) support√© par cette version de PyTorch !")
else:
    print(f"‚ö†Ô∏è  Compute Capability: {compute_cap}")

sys.exit(0)
EOF

if [ $? -ne 0 ]; then
    echo "‚ùå PyTorch ne fonctionne pas"
    exit 1
fi

# Installer onnxruntime-gpu
echo ""
echo "üöÄ Installation onnxruntime-gpu..."
pip3 install onnxruntime-gpu --no-cache-dir

# Installer d√©pendances Python
echo ""
echo "üêç Installation des d√©pendances Python..."
pip3 install -r requirements_gaussian.txt --no-cache-dir

# Cloner Gaussian Splatting
echo ""
echo "‚≠ê Installation Gaussian Splatting..."
if [ ! -d "/workspace/gaussian-splatting" ]; then
    cd /workspace
    git clone --recursive https://github.com/graphdeco-inria/gaussian-splatting
    cd gaussian-splatting
    
    # Compiler les kernels CUDA pour RTX 5090
    echo "üî• Compilation des CUDA kernels (sm_120)..."
    
    # Forcer la compilation pour Compute Capability 12.0
    export TORCH_CUDA_ARCH_LIST="12.0"
    
    pip3 install submodules/diff-gaussian-rasterization --no-cache-dir
    pip3 install submodules/simple-knn --no-cache-dir
    
    cd /workspace/3D-render-vid-gaussian
else
    echo "  ‚úì Gaussian Splatting d√©j√† install√©"
fi

# Installer Open3D
echo ""
echo "üì¶ Installation Open3D..."
pip3 install open3d --no-cache-dir --ignore-installed blinker

# Cr√©er dossiers
mkdir -p uploads outputs gaussian_workspace

# V√©rification finale
echo ""
echo "=========================================================="
echo "‚úÖ V√âRIFICATION FINALE"
echo "=========================================================="

python3 << 'EOF'
import torch
import sys

print(f"\n‚úÖ PyTorch: {torch.__version__}")
print(f"‚úÖ CUDA: {torch.version.cuda}")
print(f"‚úÖ GPU: {torch.cuda.get_device_name(0)}")

compute = torch.cuda.get_device_capability(0)
print(f"‚úÖ Compute: {compute}")

vram = torch.cuda.get_device_properties(0).total_memory / 1024**3
print(f"‚úÖ VRAM: {vram:.1f} GB")

if compute[0] >= 12:
    print("\nüî• RTX 5090 (Compute 12.0) SUPPORT√â !")
    print("üöÄ Pr√™t pour Gaussian Splatting ultra-rapide !")
    print("‚ö° Performance estim√©e: 1-2 minutes/g√©n√©ration")
else:
    print(f"\n‚ö†Ô∏è  Compute Capability {compute} d√©tect√©")

sys.exit(0)
EOF

echo ""
echo "=========================================================="
echo "‚úÖ Installation termin√©e !"
echo "=========================================================="
echo ""
echo "Pour lancer:"
echo "  ./start_gaussian.sh"
echo ""
